{"version":3,"sources":["assets/Ay-Tunes.png","util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","accessToken","SearchBar","props","handleTermChange","e","setState","term","target","value","state","search","bind","this","onSearch","className","onChange","type","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artists","album","renderAction","TrackList","tracks","map","key","id","SearchResults","Playlist","handleNameChange","onNameChange","defaultValue","PlaylistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","uri","savePlaylist","trackURIs","length","userId","console","log","method","body","JSON","stringify","playlistId","uris","App","searchResults","playlistTracks","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","alert","src","header","alt","PlaylistName","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.242b9639.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Ay-Tunes.01d221d4.png\";","const clientID = \"b3ccd5eb220b4ba58c5da64bfe938ee5\";\nconst redirectUri = \"http://localhost:3000/\";\n\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken(){\n        if(accessToken) {\n            return accessToken;\n        } \n        //check URL for accessToken:\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n        \n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n\n            //reset parameters for access token\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');   \n            return accessToken;     \n        } else if(!accessToken) {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n\n    search(term){\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, { headers: {Authorization: `Bearer ${accessToken}`}})\n        .then(response=> {\n           return response.json();\n        })\n        .then(jsonResponse=> {\n            if(!jsonResponse.tracks) {\n                return [];\n            } return jsonResponse.tracks.items.map(track=> (\n                {\n                id: track.id,\n                name: track.name,\n                artists: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri,\n                }\n            ))\n        })\n    },\n\n    savePlaylist(name, trackURIs) {\n        if (!name || !trackURIs.length) {\n            return;\n        } \n        const accessToken = Spotify.getAccessToken();\n        const headers =  {Authorization: `Bearer ${accessToken}`};\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', {headers: headers})\n        .then(response => {\n            console.log(response)\n            return response.json();\n        })\n        .then(jsonResponse=> {\n            console.log(jsonResponse)\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify( { name: name }),\n            }).then(response=> {\n                \n               return response.json();\n            })\n            .then(jsonResponse=>{\n                console.log(jsonResponse)\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\n                {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify( { uris: trackURIs}),\n                })\n            })\n        })\n    }\n}\n\nexport default Spotify;\n","import React from \"react\";\nimport \"./SearchBar.css\";\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {term: ''}\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n  search() {\n    this.props.onSearch(this.state.term);\n  };\n\n  handleTermChange = (e) =>{\n    this.setState({ \n      term: e.target.value,\n    })\n  };\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input onChange={this.handleTermChange} type=\"text\" placeholder=\"Search for a song...\" />\n        <button onClick={this.search} className=\"SearchButton\">Search</button>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n    constructor(props){\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n    renderAction(e) { \n       if(this.props.isRemoval) {\n             return <button className=\"Track-action\" onClick={this.removeTrack}> - </button>\n             } else {\n             return <button className=\"Track-action\" onClick={this.addTrack}> + </button>\n            }\n    }\n\n    addTrack(){\n       this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n    }\n\n    render() {\n    return (\n        <div className=\"Track\">\n            <div className=\"Track-info\">\n                <h3>{this.props.track.name}</h3>\n                <p>{this.props.track.artists} | {this.props.track.album}</p>\n           </div>\n           {this.renderAction()}\n        </div>\n    )\n    }\n}\n\nexport default Track","import React, { Component } from 'react'\nimport \"./TrackList.css\";\nimport Track from \"../Track/Track\";\n\nclass TrackList extends Component {\n    render() {\n        return (\n            <div className=\"TrackList\">\n                {\n                    this.props.tracks.map(track => {\n                       return <Track \n                       track={track} \n                       key={track.id}\n                       isRemoval={this.props.isRemoval} \n                       onRemove={this.props.onRemove} \n                       onAdd={this.props.onAdd} \n                       />\n                  \n                    })\n                }\n                \n            </div>\n        )\n    }\n}\n\nexport default TrackList\n","import React, { Component } from 'react'\nimport \"./SearchResults.css\";\nimport TrackList from \"../TrackList/TrackList\";\n\nclass SearchResults extends Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>This is what we found</h2>\n                <TrackList \n                isRemoval={false} \n                onAdd={this.props.onAdd}\n                tracks={this.props.SearchResults}\n                />\n            </div>\n        )\n    }\n}\n\nexport default SearchResults\n","import React from \"react\";\nimport \"./Playlist.css\";\nimport TrackList from \"../TrackList/TrackList\";\n\nclass Playlist extends React.Component {\n  constructor(props){\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n  handleNameChange(e){\n    this.props.onNameChange(e.target.value);\n  };\n\n  render() {\n    return (\n      <div className=\"PlayList\">\n        <input\n          defaultValue={\"Funky Playlist\"}\n          onChange={this.handleNameChange}\n        />\n        <TrackList\n          isRemoval={true}\n          onRemove={this.props.onRemove}\n          tracks={this.props.PlaylistTracks}\n        />\n        <button onClick={this.props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</button>\n      </div>\n    );\n  }\n}\n\nexport default Playlist;\n","import React from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"../SearchBar/SearchBar.js\";\nimport SearchResults from \"../SearchResults/SearchResults.js\";\nimport Playlist from \"../Playlist/Playlist\";\nimport Spotify from \"../../util/Spotify\";\nimport header from \"../../assets/Ay-Tunes.png\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistTracks: [],\n      playlistName: \"Funky Playlist\",\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n\n  }\n  \n  addTrack(track) {\n       if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n    return;\n  }\n    this.state.playlistTracks.push(track);\n       this.setState({\n         playlistTracks: this.state.playlistTracks \n       })\n      };\n   \n\n   removeTrack(track) {\n    this.state.playlistTracks = this.state.playlistTracks.filter(currentTrack => currentTrack.id !== track.id);\n       this.setState({\n         playlistTracks: this.state.playlistTracks\n       })\n   };\n\n   updatePlaylistName(name){\n    this.setState({\n      playlistName: name\n    })\n   };\n\n   savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map( track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs)\n    .then(()=> {\n      this.setState({\n        playlistName:'Funky Playlist',\n        playlistTracks: [],\n      })\n     })\n     .then(alert(\"Enjoy your new playlist!\"))\n   };\n\n   search(term) {\n     Spotify.search(term).then(searchResults => {\n       this.setState({searchResults: searchResults })\n      })\n   }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"titleContainer\">\n          {/* <h1>\n            Ay!<span className=\"highlight\">Tunes</span>\n          </h1> */}\n          <img className='header' src={header} alt=\"header\"/>\n        </div>\n        <div>\n          <SearchBar \n          onSearch={this.search}\n          />\n          <div className=\"App-playlist\">\n            <SearchResults \n            onAdd={this.addTrack} \n            SearchResults={this.state.searchResults} \n            />\n            <Playlist\n              onRemove={this.removeTrack}\n              PlaylistTracks={this.state.playlistTracks}\n              PlaylistName={this.state.playlistName}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n            <div id=\"footer-container\"><footer className=\"footer\">Made with <span>❤️</span> by <a target=\"_blank\" href=\"https://anaberrocal.com/\">Ana Berrocal</a></footer></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}